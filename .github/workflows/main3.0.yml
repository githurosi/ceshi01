name: Auto Update Worker with Tags

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *"  # 🌇 北京时间9点（UTC+8）
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（忽略版本检查）'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      new_version: ${{ steps.update.outputs.new_version }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: worker-repo

      - name: 预安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y pigz jq translate-shell

      - name: 检查并更新 Worker
        id: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          start_time=$(date +%s)
          
          log() {
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }
          
          FORCE_UPDATE=${{ inputs.force_update }}
          LOCAL_VERSION=$(cat worker-repo/version.txt 2>/dev/null || echo "0.0.0")
          log "INFO" "开始更新检查..."
          log "DEBUG" "本地版本: ${LOCAL_VERSION}"
          
          REPO_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest"
          RESPONSE=$(curl -s --retry 3 \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$REPO_URL")
          
          TAG_NAME=$(echo "$RESPONSE" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[] |select(.name=="worker.zip") | .browser_download_url')
          RELEASE_NOTES=$(echo "$RESPONSE" | jq -r '.body')
          
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "INFO" "已是最新版本: $TAG_NAME"
            echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          log "INFO" "检测到新版本: $TAG_NAME"
          log "INFO" "正在下载最新 worker.zip..."
          curl -LJO --retry 3 "$DOWNLOAD_URL"
          
          # 新增：解压到临时目录
          mkdir -p temp_extract
          unzip -q worker.zip -d temp_extract
          
          # 查找主JS文件（根据实际项目结构调整）
          MAIN_JS=$(find temp_extract -name "*.js" -type f | head -1)
          if [ -z "$MAIN_JS" ]; then
            echo "错误：未找到JS文件"
            exit 1
          fi
          
          # 创建目标目录结构
          mkdir -p disk
          mv "$MAIN_JS" disk/worker.js
          
          # 更新版本文件
          echo "$TAG_NAME" > worker-repo/version.txt
          echo "$RELEASE_NOTES" > worker-repo/changelog.md
          
          # 自动更新README
          echo "正在更新README..."
          echo "" >> worker-repo/README.md
          echo "## 更新日志 📝" >> worker-repo/README.md
          echo "### $TAG_NAME" >> worker-repo/README.md
          echo "$(echo "$RELEASE_NOTES" | sed 's/^/  /')" >> worker-repo/README.md
          echo "---" >> worker-repo/README.md
          
          log "INFO" "更新完成，新版本: $TAG_NAME"
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
          total_time=$(( $(date +%s) - start_time ))
          log "INFO" "总执行时间: ${total_time}秒"

      - name: 提交更改
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: worker-repo
          commit_message: |
            🔄 自动同步 Worker 版本: ${{ steps.update.outputs.new_version }}
            
            更新内容:
            $(cat worker-repo/changelog.md | head -n 5 | sed 's/^/  /')
          branch: main
          file_pattern: "version.txt changelog.md README.md disk/worker.js"

      - name: 创建版本标签
        if: success()
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          cd worker-repo
          git tag -a "v${{ steps.update.outputs.new_version }}" -m "发布版本 v${{ steps.update.outputs.new_version }}"
          git push origin "v${{ steps.update.outputs.new_version }}"
