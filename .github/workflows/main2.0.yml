name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *"  # 🌇 9 AM Beijing Time (UTC+8) corresponds to 1 AM UTC
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update (ignore version checks)'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      new_version: ${{ steps.update.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: worker-repo

      - name: Preinstall dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pigz jq translate-shell

      - name: Check and update Worker
        id: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          start_time=$(date +%s)
          
          log() {
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }
          
          # Initialize variables
          FORCE_UPDATE=${{ inputs.force_update }}
          LOCAL_VERSION=$(cat worker-repo/version.txt 2>/dev/null || echo "")
          log "INFO" "Starting update check..."
          log "DEBUG" "Local version: ${LOCAL_VERSION:-none}"
          
          # Get latest version
          REPO_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases"
          RESPONSE=$(curl -s --retry 3 \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$REPO_URL")
          
          # Parse version info
          TAG_NAME=$(echo "$RESPONSE" | jq -r '.[0].tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.[0].assets[] |select(.name == "worker.zip") | .browser_download_url')
          RELEASE_NOTES=$(echo "$RESPONSE" | jq -r '.[0].body')
          
          # Version comparison
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "INFO" "Already up-to-date, no update needed"
            echo "new_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Prepare update contents
          log "INFO" "New version detected: $TAG_NAME"
          log "INFO" "Translating release notes..."
          
          # Translate release notes
          TRANSLATED_NOTES=$(echo "$RELEASE_NOTES" | trans -b -e google -t en)
          
          # Generate Markdown content
          FORMATTED_NOTES=$(echo "$TRANSLATED_NOTES" | sed 's/^/  /')
          
          # Update files
          echo "$TAG_NAME" > worker-repo/version.txt
          echo "$TRANSLATED_NOTES" > worker-repo/changelog.md
          
          # Auto-append to README
          echo "Appending release notes to README..."
          echo "" >> worker-repo/README.md
          echo "## Changelog 📝" >> worker-repo/README.md
          echo "### $TAG_NAME" >> worker-repo/README.md
          echo "$FORMATTED_NOTES" >> worker-repo/README.md
          echo "---" >> worker-repo/README.md
          
          # Commit message
          log "INFO" "Update completed, new version: $TAG_NAME"
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Performance stats
          total_time=$(( $(date +%s) - start_time ))
          log "INFO" "Total execution time: ${total_time} seconds"

      - name: Commit changes
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: worker-repo
          commit_message: |
            🔄 Auto-sync Worker version: ${{ steps.update.outputs.new_version }}
            
            Update contents:
            $(cat worker-repo/changelog.md | head -n 5 | sed 's/^/  /')
          branch: main
          file_pattern: "version.txt changelog.md README.md *.js"
