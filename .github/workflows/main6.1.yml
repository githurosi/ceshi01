name: Enterprise-Grade Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（覆盖版本检查）'
        type: boolean
        required: true
        default: false

permissions:
  contents: write
  id-token: write

env:
  SAFE_DIR: /home/runner/work/secure-assets
  MAX_RETRIES: 3
  CONCURRENCY_GROUP: update-worker-${{ github.ref }}

concurrency:
  group: ${{ env.CONCURRENCY_GROUP }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      new_version: ${{ steps.version_check.outputs.new_version }}
      changelog: ${{ steps.version_check.outputs.changelog }}
    
    steps:
      - name: 🔒 初始化安全环境
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: 🔧 配置开发环境
        run: |
          mkdir -p ${{ env.SAFE_DIR }}
          chmod 700 ${{ env.SAFE_DIR }}
          echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" >> $GITHUB_ENV

      - name: 🔐 认证准备
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: 🚀 版本检查与更新
        id: version_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/usr/bin/env bash
          set -o errexit -o nounset -o pipefail -o errtrace
          
          trap 'handle_error $LINENO' ERR
          handle_error() {
            local line=$1
            echo "::error::[${line}] 致命错误: $BASH_COMMAND"
            exit 1
          }

          LOG_FILE="${{ env.SAFE_DIR }}/update.log"
          exec > >(tee -a "$LOG_FILE") 2>&1

          log() {
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }

          log "INFO" "启动企业级更新流程..."

          if ! LOCAL_VERSION=$(cat version.txt 2>/dev/null); then
            log "WARN" "未找到版本文件，初始化版本为0.0.0"
            LOCAL_VERSION="0.0.0"
          fi

          log "DEBUG" "当前版本: $LOCAL_VERSION"

          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge ${{ env.MAX_RETRIES }} ]; do
            if RESPONSE=$(curl -sSL --retry 3 \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$REPO_URL/latest"); then
              break
            fi
            log "WARN" "获取Release失败，重试次数: $((RETRY_COUNT+1))/${{ env.MAX_RETRIES }}"
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep $((RETRY_COUNT*2))
          done

          if [ $RETRY_COUNT -eq ${{ env.MAX_RETRIES }} ]; then
            log "ERROR" "达到最大重试次数，终止流程"
            exit 1
          fi

          TAG_NAME=$(echo "$RESPONSE" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name == "${{ env.TARGET_FILE }}") | .browser_download_url')
          CHANGELOG=$(echo "$RESPONSE" | jq -r '.body' | sed 's/"/\\"/g')

          if ! dpkg --compare-versions "$TAG_NAME" gt "$LOCAL_VERSION" && [ "${{ inputs.force_update }}" != "true" ]; then
            log "INFO" "已是最新版本: $TAG_NAME"
            echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
            exit 0
          fi

          log "INFO" "开始下载更新包..."
          wget -q --show-progress --progress=bar:force:noscroll \
            -O "${{ env.SAFE_DIR }}/${{ env.TARGET_FILE }}" \
            "$DOWNLOAD_URL"

          log "INFO" "执行安全解压..."
          unzip -o -d "${{ env.SAFE_DIR }}/update" "${{ env.SAFE_DIR }}/${{ env.TARGET_FILE }}"

          TEMP_DIR=$(mktemp -d)
          mv "${{ env.SAFE_DIR }}/update"/* "$TEMP_DIR"
          
          if ! md5sum -c "$TEMP_DIR/checksum.md5"; then
            log "ERROR" "文件校验失败，终止更新"
            rm -rf "$TEMP_DIR"
            exit 1
          fi

          rsync -a --delete "$TEMP_DIR/" "./"
          echo "$TAG_NAME" > version.txt
          echo "$CHANGELOG" > changelog.md

          log "SUCCESS" "更新成功，新版本: $TAG_NAME"
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: 🔄 提交变更
        if: success()
        uses: EndBug/add-and-commit@v9
        with:
          add: "version.txt changelog.md disk/worker.js"
          message: |
            🚀 自动更新至 v${{ steps.version_check.outputs.new_version }}

            更新内容：
            ${{ steps.version_check.outputs.changelog }}
          author_name: GitHub Actions
          author_email: actions@github.com

      - name: 🏷️ 发布版本标签
        if: success()
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          git tag -a "v${{ steps.version_check.outputs.new_version }}" \
            -m "发布正式版本 v${{ steps.version_check.outputs.new_version }}"
          git push origin "v${{ steps.version_check.outputs.new_version }}"

      - name: 🚨 异常处理
        if: failure()
        run: |
          # 回滚机制
          if [ -f version.txt.bak ]; then
            mv version.txt.bak version.txt
            echo "::warning::[回滚操作] 已恢复至版本: $(cat version.txt)"
          fi

          # 通知系统（需配置ALERT_TOKEN）
          curl -X POST https://api.example.com/alert \
            -H "Authorization: Bearer ${{ secrets.ALERT_TOKEN }}" \
            -d "{\"title\":\"更新失败\",\"message\":\"工作流执行失败，请立即检查\",\"level\":\"critical\"}"
